// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace StocksViewer.Infrastructure.Migrations
{
    [DbContext(typeof(OrdersDbContext))]
    [Migration("20230410104050_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Entities.BuyOrder", b =>
                {
                    b.Property<Guid>("BuyOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateAndTimeOfOrder")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<uint>("Quantity")
                        .HasColumnType("int unsigned");

                    b.Property<string>("StockName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StockSymbol")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("BuyOrderID");

                    b.ToTable("BuyOrders", (string)null);

                    b.HasData(
                        new
                        {
                            BuyOrderID = new Guid("ea461269-cea8-4c01-9a43-bbcc39a68953"),
                            DateAndTimeOfOrder = new DateTime(2023, 3, 22, 12, 10, 0, 0, DateTimeKind.Unspecified),
                            Price = 237.0,
                            Quantity = 100u,
                            StockName = "Microsoft Corporation",
                            StockSymbol = "MSFT"
                        },
                        new
                        {
                            BuyOrderID = new Guid("6081ce3b-7a4b-4fb3-9342-01276fec3540"),
                            DateAndTimeOfOrder = new DateTime(2023, 3, 21, 12, 15, 3, 0, DateTimeKind.Unspecified),
                            Price = 210.0,
                            Quantity = 10u,
                            StockName = "Microsoft Corporation",
                            StockSymbol = "MSFT"
                        },
                        new
                        {
                            BuyOrderID = new Guid("6aa989b4-c641-42ee-8f56-e5db5cd44f45"),
                            DateAndTimeOfOrder = new DateTime(2023, 3, 22, 16, 21, 12, 0, DateTimeKind.Unspecified),
                            Price = 147.0,
                            Quantity = 55u,
                            StockName = "Apple Inc.",
                            StockSymbol = "AAPL"
                        },
                        new
                        {
                            BuyOrderID = new Guid("fe154c85-d418-4bcd-adce-abe4b5520a84"),
                            DateAndTimeOfOrder = new DateTime(2023, 3, 22, 19, 55, 22, 0, DateTimeKind.Unspecified),
                            Price = 134.0,
                            Quantity = 400u,
                            StockName = "Amazon.com, Inc",
                            StockSymbol = "AMZN"
                        });
                });

            modelBuilder.Entity("Entities.SellOrder", b =>
                {
                    b.Property<Guid>("SellOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateAndTimeOfOrder")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Price")
                        .HasColumnType("double");

                    b.Property<uint>("Quantity")
                        .HasColumnType("int unsigned");

                    b.Property<string>("StockName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("StockSymbol")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("SellOrderID");

                    b.ToTable("SellOrders", (string)null);

                    b.HasData(
                        new
                        {
                            SellOrderID = new Guid("cb600cef-05f5-4bcc-ade5-508cbe50ae0c"),
                            DateAndTimeOfOrder = new DateTime(2023, 3, 22, 3, 24, 0, 0, DateTimeKind.Unspecified),
                            Price = 250.0,
                            Quantity = 99u,
                            StockName = "Microsoft Corporation",
                            StockSymbol = "MSFT"
                        },
                        new
                        {
                            SellOrderID = new Guid("a1ec73fb-2b1e-470e-a50e-c3ae5031393c"),
                            DateAndTimeOfOrder = new DateTime(2023, 3, 22, 15, 12, 0, 0, DateTimeKind.Unspecified),
                            Price = 200.0,
                            Quantity = 5u,
                            StockName = "Microsoft Corporation",
                            StockSymbol = "MSFT"
                        },
                        new
                        {
                            SellOrderID = new Guid("002a4233-9e72-42fd-87b2-ac0cba198a75"),
                            DateAndTimeOfOrder = new DateTime(2023, 3, 22, 5, 11, 45, 0, DateTimeKind.Unspecified),
                            Price = 150.0,
                            Quantity = 40u,
                            StockName = "Apple Inc.",
                            StockSymbol = "AAPL"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
